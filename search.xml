<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[二级指针和字符串数组和命令行参数]]></title>
    <url>%2F2019%2F02%2F18%2F%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[二维数组先看以下代码： 123456789#include &lt;stdio.h&gt;int main()&#123; int ar[10] = &#123;12,23,34,56&#125;; sizeof(ar); int (&amp;br) [10] = ar; int (*p) [10] = &amp;ar; return 0;&#125; 以上三种情况中，数组名都代表数组的类型和大小，在以外的情况中，ar代表首元素的地址，int (&amp;br)[10]代表br是数组ar的一个引用，编译器是这样解释的，br是一个引用，是一个数组类型的引用，数组大小是10，如果不加括号，就会这样解释，开辟十个引用空间，这显然是不合理的，int(*p)[10]也是同样的道理，p是一个指向数组的指针，数组里面有两个属性，一个是存放的类型，一个是数组的大小，在编译时都必须给定。 除了以上三种情况，数组名都是首元素的地址，他退化成一个指针，并且是一个常性指针，不可以被赋值。 s与p的差别： 下面来说说这种int*s[10]这种表示s是一个数组，里面存放了10个int型指针，也就是说对于p来说他开辟4个空间，*p开辟40个空间，对于s来说他开辟40个空间，里面每个元素代表了一个指针，更通俗点来说，p是一个指针，s是一个数组名 下面来看看图示： ！[s与p的差别][二级指针和字符串数组和命令行参数/test1.png] 有了上面的铺垫，我们来正是探讨二维数组： 如果要给ar3的第二个元素赋值*(*(p+2)+1)，相当于p[2][1]，也是相当于这么写*(p[2]+1) 现在我们再来看一个例子，这个就有点混了，我尽力向大家解释这个东西 12345678910#include &lt;stdio.h&gt;int main()&#123; int ar[3][4]; sizeof(ar);//48 int (&amp;br) [3][4] = ar; int (*p) [3][4] = &amp;ar;//p+1加48个字节 int (*s) [4] = ar;//ar+1，加一个数组的大小 return 0;&#125; 最开始的三种情况就回到了我们最开始讨论的那三个情况，ar代表了数组的类型和大小，第4个ar代表了数组的首元素的地址，对于一个二维数组来说，他的首元素代表的就是一个一维数组，所以s+1指向了ar[1]，我们去看汇编源码的时候可以清楚的看到，二维数组也是由一维数组构造的。 ，同理，三维数组也是由二维数组组成的，。 现在我们来测试一个例子，来看看大家到底有没有理解这块的知识： 123456789#include &lt;stdio.h&gt;int main()&#123; int ar[5][2] = &#123;1,2,3,4,5,6,7,8,9,10&#125;; int(*p)[2] = &amp;ar[1]; int *s = ar[1]; printf("%d %d\n",p[1][3],s[3]); return 0;&#125; 打印结果会是多少呢？ 8,6 因为p是指向一个二维数组第二个元素的地址，所以p[1][3]相当于*((*p+1)+3)，s这个呢相当于*s+3加了3个空间。 字符数组]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[重新起航]]></title>
    <url>%2F2019%2F02%2F16%2F%E9%87%8D%E6%96%B0%E8%B5%B7%E8%88%AA%2F</url>
    <content type="text"><![CDATA[​ 我是个码农，却假装是个程序员，不在浮沙筑高台，不为繁华易匠心，是我的追求，今天是2019年情人节的第二天，我想重新起航。 12345#include &lt;stdio.h&gt;int main(void)&#123; printf("Hello world\n");&#125;]]></content>
      <categories>
        <category>个人随笔</category>
      </categories>
  </entry>
</search>
